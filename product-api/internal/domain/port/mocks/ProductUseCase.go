// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/fiap-postech-soat1-group21-stage4/product-api/product-api/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// ProductUseCase is an autogenerated mock type for the ProductUseCase type
type ProductUseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, product
func (_m *ProductUseCase) Create(ctx context.Context, product *entity.Product) (*entity.Product, error) {
	ret := _m.Called(ctx, product)

	var r0 *entity.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Product) (*entity.Product, error)); ok {
		return rf(ctx, product)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Product) *entity.Product); ok {
		r0 = rf(ctx, product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Product) error); ok {
		r1 = rf(ctx, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, pdt
func (_m *ProductUseCase) Delete(ctx context.Context, pdt *entity.Product) error {
	ret := _m.Called(ctx, pdt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Product) error); ok {
		r0 = rf(ctx, pdt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProducts provides a mock function with given fields: _a0
func (_m *ProductUseCase) GetProducts(_a0 context.Context) (*entity.ProductResponseList, error) {
	ret := _m.Called(_a0)

	var r0 *entity.ProductResponseList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*entity.ProductResponseList, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *entity.ProductResponseList); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ProductResponseList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, product
func (_m *ProductUseCase) Update(ctx context.Context, product *entity.Product) error {
	ret := _m.Called(ctx, product)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Product) error); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProductUseCase creates a new instance of ProductUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductUseCase {
	mock := &ProductUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
